<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hello_world</title>
    <link href="/2022/05/15/hello-world/"/>
    <url>/2022/05/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello, world!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>保持一个简洁的windows系统所需要的软件</title>
    <link href="/2022/03/03/%E4%BF%9D%E6%8C%81%E4%B8%80%E4%B8%AA%E7%AE%80%E6%B4%81%E7%9A%84windows%E7%B3%BB%E7%BB%9F%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
    <url>/2022/03/03/%E4%BF%9D%E6%8C%81%E4%B8%80%E4%B8%AA%E7%AE%80%E6%B4%81%E7%9A%84windows%E7%B3%BB%E7%BB%9F%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>本文目的：</p><ol><li>复盘我清理系统的过程，记录必需的软件，下次再帮人清理系统的时候直接看这份文档就行了；</li><li>尝试给出一份比较通用的清理系统的方案，保持系统简洁；</li></ol><span id="more"></span><p><a href="https://geekuninstaller.com/">geek uninstaller</a>：</p><ul><li>意义：干净地卸载软件<ul><li>干净地卸载软件。它不仅会卸载软件，还会清理使用软件后遗留下来的数据文件、注册表项等等（示例： <a href="https://geekuninstaller.com/assets/images/screen_2.png">https://geekuninstaller.com/assets/images/screen_2.png</a> ）</li></ul></li></ul><p><a href="https://www.huorong.cn/">火绒</a>：</p><ul><li>意义：一个可靠的电脑管家<ul><li>1）杀毒，清理垃圾；</li><li>2）屏蔽<strong>广告弹窗</strong>；</li><li>3）不流氓；</li></ul></li><li>注意：<ul><li>1）使用火绒之前，先把某管家这类杀毒软件先退出，再卸载（用geek uninstaller）；</li></ul></li></ul><p><a href="https://u.tools/">utools</a>：</p><ul><li>意义：还你一个干净的桌面<ul><li>1）应用启动器。有了它就不用在桌面放上一堆快捷方式，所有的应用都可以从utools启动；</li><li>2）与everything结合，可以搜索到<strong>本机的任何文件</strong>，不用再因为怕找不到文件而把文件都堆在桌面了；</li><li>于是，桌面就可以只留一个垃圾桶了，还你一个干干净净的桌面。</li></ul></li><li>注：<ul><li>如果软件不是安装的，而是从压缩包中解压的，可以手动把软件的启动程序放到utools中，然后它也可以通过utools启动。</li></ul></li></ul><p><a href="https://cn.bing.com/">Bing搜索引擎</a>：</p><ul><li>意义：断绝垃圾软件的来源<ul><li>我观察到有许多人无意之中下载了垃圾软件的原因是使用了百度搜索引擎，通过百度下载的软件包里会附带xx下载器，或者其他什么垃圾软件，总之不是来自软件官网的安装包（这是百度搜索推荐的锅）。使用bing就没有这个问题，因为bing会直接把官网链接放在第一条推荐给你，这样你就可以直接从官网下载最干净的安装包，从源头杜绝垃圾软件。</li></ul></li><li>注：<ul><li>可以通过Microsoft edge来使用bing，因为bing是它的默认搜索引擎，而edge是windows自带的。</li></ul></li></ul><p>于是，本文提到的这些软件可以构成一个比较系统的方案：</p><ol><li>没有垃圾软件——bing+geek uninstaller；</li><li>干净的桌面——utools+火绒；</li><li>安全的系统——geek+火绒+bing；</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>to-public/published</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我如何用 Maverick来搭建自己的博客？</title>
    <link href="/2021/02/04/%E6%88%91%E5%A6%82%E4%BD%95%E7%94%A8%20Maverick%E6%9D%A5%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F/"/>
    <url>/2021/02/04/%E6%88%91%E5%A6%82%E4%BD%95%E7%94%A8%20Maverick%E6%9D%A5%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>为什么要使用Maverick来搭建博客？什么是Maverick？使用它搭建博客有什么好处？</p><p>关于为什么要使用Mavrick的大致原因是：用hexo手动部署博客以及后续添加博客、修改博客的过程很繁琐，写博客最重要的是「写」，而不是花大把的时间去研究如何搭建博客，就像有的朋友调侃道：「总是折腾，但从来不写」。而Maverick可以帮助你省去这些繁琐的过程，只需要你写文章、修改文章，剩下的生成、发布、部署这些事都交给Maverick去完成。</p><span id="more"></span><p>如果还想了解更多Maverick的内容，可以看这篇文章：<a href="https://sspai.com/post/58013">用 GitHub 搭建静态博客太繁琐？用这个小工具实现「傻瓜式」发布</a>。</p><p>本文中的操作默认都是在master（后面改名为source）分支下进行。</p><h2 id="1-搭建过程"><a href="#1-搭建过程" class="headerlink" title="1 搭建过程"></a>1 搭建过程</h2><h3 id="1-1-准备好下列文件-x2F-文件夹"><a href="#1-1-准备好下列文件-x2F-文件夹" class="headerlink" title="1.1 准备好下列文件&#x2F;文件夹"></a>1.1 准备好下列文件&#x2F;文件夹</h3><ul><li>.github（先用复制的，后期自己改）</li><li>assets</li><li>src（这里放博客文章，请至少准备一篇文章（md格式）放在这里）<ul><li>images</li><li>static</li></ul></li><li>config.py（先用复制的，后期自己修改）</li><li>Makefile（先用复制的，后期自己修改）</li><li>README.md</li></ul><h3 id="1-2-修改master分支名"><a href="#1-2-修改master分支名" class="headerlink" title="1.2 修改master分支名"></a>1.2 修改master分支名</h3><p>（1）在github修改master分支名为source。</p><p>（2）在本地执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git branch -m master <span class="hljs-built_in">source</span><br>git fetch origin<br>git branch -u origin/source <span class="hljs-built_in">source</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-操作cache分支"><a href="#1-3-操作cache分支" class="headerlink" title="1.3 操作cache分支"></a>1.3 操作cache分支</h3><p>（1）创建cache分支。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git branch cache<br></code></pre></div></td></tr></table></figure><p>（2）在cache分支下创建文件 <code>sizeinfo.json</code>。</p><p>（3）把分支提交到github</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 此时处于cache分支</span><br>git push origin HEAD -u<br></code></pre></div></td></tr></table></figure><h3 id="1-4-操作gh-pages分支"><a href="#1-4-操作gh-pages分支" class="headerlink" title="1.4 操作gh-pages分支"></a>1.4 操作gh-pages分支</h3><p>（gh-pages分支是用来展示的）</p><p>（1）创建gh-pages分支，并提交到github</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git branch gh-pages<br>git checkout gh-pages<br><br><span class="hljs-comment"># 可以修改一些文件，并提交commit</span><br><br>git push origin HEAD -u<br></code></pre></div></td></tr></table></figure><p>（2）在github，进入仓库 <code>settings</code>，在 <code>Github Pages</code>选项下把 <code>Source</code>换成gh-pages分支。</p><h3 id="1-5-准备一个token，并为这个仓库添加token"><a href="#1-5-准备一个token，并为这个仓库添加token" class="headerlink" title="1.5 准备一个token，并为这个仓库添加token"></a>1.5 准备一个token，并为这个仓库添加token</h3><p>准备token的过程省略，现在假设已经得到一个token。</p><p>（1）进入 <code>settings</code>-<code>Secrets</code>，选择 <code>New repository secret</code>，创建一个secret。</p><ul><li>Name填 <code>PERSONAL_TOKEN</code>。</li><li>Value填得到的token。</li></ul><p>（2）选择「添加」。</p><h3 id="1-6-使用Maverick和Galileo"><a href="#1-6-使用Maverick和Galileo" class="headerlink" title="1.6 使用Maverick和Galileo"></a>1.6 使用Maverick和Galileo</h3><p>Galileo是Maverick的一个主题。</p><p>1.创建一个文件 <code>.gitmodules</code>，不填内容。</p><p>2.执行命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#现在在source分支，如果不是请切换到source</span><br><br><span class="hljs-comment"># 添加子模块——Maverick</span><br>git submodule add https://github.com/AlanDecode/Maverick.git<br><br><span class="hljs-comment"># 添加子模块——Galileo主题的latest分支</span><br>git submodule add -b latest https://github.com/AlanDecode/Maverick-Theme-Galileo.git ./Galileo<br></code></pre></div></td></tr></table></figure><p>3.提交到github。</p><h3 id="1-7-自定义配置来适配自己的博客"><a href="#1-7-自定义配置来适配自己的博客" class="headerlink" title="1.7 自定义配置来适配自己的博客"></a>1.7 自定义配置来适配自己的博客</h3><p>1.编辑 <code>conf.py</code>，修改以下内容（只挑出现在最必要改的）</p><ul><li><code>site_prefix</code>：改成自己博客的名字</li></ul><p>至此博客已经可以正常运行了。在浏览器中输入网址 <code>https://username.github.io/repo/</code>，查看是否成功。</p><h2 id="2-自定义步骤"><a href="#2-自定义步骤" class="headerlink" title="2 自定义步骤"></a>2 自定义步骤</h2><h3 id="2-1-自动化上传博客流程"><a href="#2-1-自动化上传博客流程" class="headerlink" title="2.1 自动化上传博客流程"></a>2.1 自动化上传博客流程</h3><p>复制两个文件</p><ul><li>update_site.bat（windows下使用）</li><li>update_site.sh（linux&#x2F;macos下使用）</li></ul><h3 id="2-2-修改博客的一些信息-x2F-配置"><a href="#2-2-修改博客的一些信息-x2F-配置" class="headerlink" title="2.2 修改博客的一些信息&#x2F;配置"></a>2.2 修改博客的一些信息&#x2F;配置</h3><ul><li><code>conf.py</code><ul><li><code>template</code>：可以切换主题<ul><li>可选的主题有：Galileo、</li></ul></li><li><code>site_name</code></li><li><code>site_logo</code><ul><li>要求</li></ul></li><li><code>site_build_date</code></li><li><code>author</code></li><li><code>email</code></li><li><code>author_homepage</code></li><li><code>description</code></li><li><code>key_words</code></li><li><code>external_links</code></li><li><code>nav</code></li><li><code>social_links</code></li></ul></li></ul><h3 id="2-3-写文章的注意事项"><a href="#2-3-写文章的注意事项" class="headerlink" title="2.3 写文章的注意事项"></a>2.3 写文章的注意事项</h3><ul><li><p>支持的格式是 <code>markdown</code>。</p></li><li><p>在文章的首部位置，需要写上文章的元数据，其中必须要填的有如下</p><ul><li>layout</li><li>title</li><li>slug（文章的链接）</li><li>date</li></ul></li><li><p>元数据使用的数据格式是YAML，注意使用规则，比如空格有严格的要求。</p></li><li><p>如果想要了解更详细的要求，看<a href="https://github.com/AlanDecode/Maverick">这里</a>。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://github.com/AlanDecode/Blog-With-GitHub-Boilerplate">Blog-With-GitHub-Boilerplate</a>（这是博客文章《完全用 GitHub 写博客》所提出流程的示例仓库。）</li><li><a href="https://github.com/AlanDecode/Maverick">Maverick</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>to-public/published</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux-解决wine系应用（如tim、wps）无法使用fcitx输入中文的问题</title>
    <link href="/2020/04/06/ArchLinux-%E8%A7%A3%E5%86%B3wine%E7%B3%BB%E5%BA%94%E7%94%A8%EF%BC%88%E5%A6%82tim%E3%80%81wps%EF%BC%89%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8fcitx%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/04/06/ArchLinux-%E8%A7%A3%E5%86%B3wine%E7%B3%BB%E5%BA%94%E7%94%A8%EF%BC%88%E5%A6%82tim%E3%80%81wps%EF%BC%89%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8fcitx%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="我的系统"><a href="#我的系统" class="headerlink" title="我的系统"></a>我的系统</h2><ul><li>archlinux</li><li>i3wm</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在应用程序对应的<strong>启动文件</strong>中加入以下代码</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">XMODIFIERS</span>=<span class="hljs-string">&quot;@im=fcitx&quot;</span><br><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GTK_IM_MODULE</span>=<span class="hljs-string">&quot;fcitx&quot;</span><br><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">QT_IM_MODULE</span>=<span class="hljs-string">&quot;fcitx&quot;</span><br></code></pre></div></td></tr></table></figure><p><strong>已解决应用：deepin-tim（deepin.com.qq.office）、wps</strong>（因为我就用了这两个，但方法是通用的）</p><p>如何找到应用对应的启动文件呢？</p><p>方法一（如果你的文件管理器是 pcmancf）：</p><p>打开 <code>pcmancf</code>，进入 <code>Applications</code> 那一栏，找到对应的应用程序图标，右击查看属性。<code>Desktop Entry</code> 中 <code>command</code> 那一栏就有启动文件的位置。</p><p>方法二：</p><p>进入路径 <code>/usr/share/applications/</code>，找到你想要修改的应用程序对应的 <code>.desktop</code> 文件（以tim举例，就是找到 <code>deepin.com.qq.office.desktop</code> 文件）。</p><p>查看文件，其中 <code>Exec</code> 一行就是文件位置（比如tim： <code>Exec=&quot;/opt/deepinwine/apps/Deepin-TIM/run.sh&quot; -u %u</code>，那么启动文件就是 <code>/opt/deepinwine/apps/Deepin-TIM/run.sh</code>，修改它就行了）。</p>]]></content>
    
    
    
    <tags>
      
      <tag>to-public/published</tag>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建私有Git服务器</title>
    <link href="/2019/12/22/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Git%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2019/12/22/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Git%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h2><p>本文介绍如何搭建私有git服务器，实现免密 <code>git clone/push/pull</code>。</p><span id="more"></span><p>我的系统环境：</p><ul><li>阿里云 Centos7</li><li>服务器ip：<code>47.98.248.***</code></li></ul><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1 安装Git"></a>1 安装Git</h2><p>用yum安装，比较简单。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install -y git<br></code></pre></div></td></tr></table></figure><p>安装完成后，用 <code>git version</code> 查看版本。</p><h2 id="2-创建一个Git用户"><a href="#2-创建一个Git用户" class="headerlink" title="2 创建一个Git用户"></a>2 创建一个Git用户</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">adduser git<br></code></pre></div></td></tr></table></figure><h2 id="3-创建证书登录"><a href="#3-创建证书登录" class="headerlink" title="3 创建证书登录"></a>3 创建证书登录</h2><h3 id="3-1-打开RSA认证"><a href="#3-1-打开RSA认证" class="headerlink" title="3.1 打开RSA认证"></a>3.1 打开RSA认证</h3><p>修改 <code>/etc/ssh/sshd_config</code> 文件中的3项内容，改为：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">RSAAuthentication <span class="hljs-built_in">yes</span><br>PubkeyAuthentication <span class="hljs-built_in">yes</span><br>AuthorizedKeysFile .ssh/authorized_keys<br></code></pre></div></td></tr></table></figure><h3 id="3-2-创建authorized-keys文件"><a href="#3-2-创建authorized-keys文件" class="headerlink" title="3.2 创建authorized_keys文件"></a>3.2 创建authorized_keys文件</h3><p>此文件用于存储用户公钥。日后如果有需要访问git服务器的用户，将其公钥添加到此文件即可。</p><p>因为我们使用git用户访问仓库，所以先创建 <code>/home/git</code> 目录</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /home/git<br><span class="hljs-built_in">chmod</span> 700 /home/git <span class="hljs-comment">#修改权限</span><br><span class="hljs-built_in">chown</span> git:git /home/git <span class="hljs-comment">#修改用户为git</span><br></code></pre></div></td></tr></table></figure><p>在 <code>/home/git</code> 目录下，创建 <code>.ssh</code> 目录</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /home/git/.ssh<br><span class="hljs-built_in">chmod</span> 700 /home/git/.ssh <span class="hljs-comment">#修改权限</span><br></code></pre></div></td></tr></table></figure><p>再在 <code>.ssh</code> 目录下创建 <code>authorized_keys</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /home/git/.ssh/authorized_keys<br><span class="hljs-built_in">chmod</span> 600 /home/git/.ssh/authorized_keys <span class="hljs-comment">#修改权限</span><br></code></pre></div></td></tr></table></figure><p>修改 <code>.ssh</code> 目录及 <code>authorized_keys</code> 文件的拥有者为git</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> git:git /home/git/.ssh<br><span class="hljs-built_in">chown</span> git:git /home/git/.ssh/authorized_keys<br></code></pre></div></td></tr></table></figure><p>把用户的公钥放进去，一行一个，再有新的追加即可。</p><p><em>比如我的 <code>authorized_keys</code> 文件（放的是我的公钥）：</em></p><blockquote><p><em>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDk9Erd5YPRJUEKs+HEVNJFfTdoas47Vw&#x2F;xxh+LELsSi&#x2F;FZTFgQf5EfftS3iJxU6T6F5rrsSvmAphZpZ50T&#x2F;f&#x2F;a+&#x2F;Z+kLvZypAKlrSQaWThOlWIdbdpJ270QzrfzKrUcqv3Tki&#x2F;TeilGWM6YasuRRoxPyQcBmmO3+46l9spn2bv6Mkj64&#x2F;yhLF0tfjeznZ&#x2F;A3PVyLq&#x2F;LAQ9RWfoJPDKrmsf4aMCm2az80rk7qzhxiGKt&#x2F;G+NUUfTEY3XeuZkSx8T07gyF+wLE91Qf55Xi4phAfVfobBXCgAENEw6oBlKNfFR7Qhuu2R4Hazbf3v4jEBzwC+m5xzyABBp3AztsQ+lRvb <a href="mailto:&#108;&#x65;&#x76;&#105;&#x79;&#x61;&#x6e;&#x31;&#57;&#x39;&#56;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;">&#108;&#x65;&#x76;&#105;&#x79;&#x61;&#x6e;&#x31;&#57;&#x39;&#56;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a></em></p></blockquote><h3 id="3-3-创建用户公钥（客户端）"><a href="#3-3-创建用户公钥（客户端）" class="headerlink" title="3.3 创建用户公钥（客户端）"></a>3.3 创建用户公钥（客户端）</h3><p>我在win10上创建。<strong>如果已有，不用再创建。</strong></p><p>使用git bash命令行窗口运行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span> <span class="hljs-comment">#生成一对公钥密钥</span><br></code></pre></div></td></tr></table></figure><p>运行命令后会让你选择保存文件地位置，<strong>不用管，连续回车</strong>，3次。</p><p>一般生成的文件会保存在 <code>C:\Users\user\.ssh</code> 目录下。（比如我的是：<code>C:\Users\yllyandy\.ssh</code>）</p><p>将生成的公钥（.pub文件）内容添到服务器 <code>authorized_keys</code> 文件中。</p><h2 id="4-初始化git仓库"><a href="#4-初始化git仓库" class="headerlink" title="4 初始化git仓库"></a>4 初始化git仓库</h2><p>选择一个目录，初始化仓库。比如 <code>/srv/</code>。</p><p>进入目录 <code>/srv/</code> 下。运行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> gitrepo <span class="hljs-comment">#创建gitrepo目录</span><br><span class="hljs-built_in">cd</span> gitrepo<br>git init --bare sample.git <span class="hljs-comment">#初始化一个名为“sample”的仓库（无工作区）</span><br></code></pre></div></td></tr></table></figure><p>更改仓库所属用户：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> git:git sample.git<br></code></pre></div></td></tr></table></figure><h2 id="5-克隆仓库（客户端）"><a href="#5-克隆仓库（客户端）" class="headerlink" title="5 克隆仓库（客户端）"></a>5 克隆仓库（客户端）</h2><p>首先，要在客户端上，安装git。</p><p><strong>如果只生成过一对公钥密钥，且未进行过其他配置</strong>。则运行下面的命令就行。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 格式：git clone git@host:仓库地址</span><br>git <span class="hljs-built_in">clone</span> git@47.98.248.213:/srv/gitrepo/sample.git<br></code></pre></div></td></tr></table></figure><p><strong>如果进行过配置</strong>，比如我的 <code>C:\Users\yllyandy\.ssh</code> 目录下有 <code>config</code> 文件，配置了两对公钥密钥。内容为：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 该文件用于配置私钥对应地服务器</span><br><span class="hljs-comment"># aliyun - git user</span><br>Host git-server<br>HostName 47.98.248.213<br>User git<br>IdentityFIle C:/Users/yllyandy/.ssh/id_rsa_2<br>PubKeyAuthentication <span class="hljs-built_in">yes</span><br><br><span class="hljs-comment"># aliyun - root user</span><br>Host aliyun<br>HostName 47.98.248.213<br>User root<br>IdentityFile C:/Users/yllyandy/.ssh/id_rsa_aliyun<br>PubKeyAuthentication <span class="hljs-built_in">yes</span><br></code></pre></div></td></tr></table></figure><p>则需要运行以下命令，才能免密地执行clone操作</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 格式：git clone Host:仓库位置</span><br>git <span class="hljs-built_in">clone</span> git-server:/srv/gitrepo/sample.git<br></code></pre></div></td></tr></table></figure><h2 id="6-禁止git用户用户登录"><a href="#6-禁止git用户用户登录" class="headerlink" title="6 禁止git用户用户登录"></a>6 禁止git用户用户登录</h2><p>为了安全起见，需要禁止git用户登录服务器，修改 <code>/etc/passwd</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#找到原git用户的配置：</span><br>git:x:1000:1000::/home/git:/bin/bash<br><br><span class="hljs-comment">#改为：</span><br>git:x:1000:1000::/home/git:/bin/git-shell<br></code></pre></div></td></tr></table></figure><p>至此，git服务器安装完成。</p><p><strong>如果有用户需要访问仓库，将他的公钥添加到 <code>.ssh/authorized_keys</code> 文件中即可。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>to-public/published</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
